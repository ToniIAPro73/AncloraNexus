# Crear tabla con casos de uso espec√≠ficos y mejores pr√°cticas

casos_uso_data = {
    'Caso_Uso': [
        'Word a PDF b√°sico',
        'Excel a CSV masivo',
        'PDF a Excel (tablas)',
        'Im√°genes a diferentes formatos',
        'HTML a PDF con estilos',
        'JSON a Excel reportes',
        'CSV a gr√°ficos/dashboards',
        'Web scraping a documentos',
        'Automatizaci√≥n reportes Office',
        'Documentos con plantillas din√°micas',
        'Extracci√≥n texto de PDFs',
        'Manipulaci√≥n im√°genes batch',
        'Conversi√≥n formatos legacy',
        'APIs REST a documentos',
        'An√°lisis datos no estructurados'
    ],
    'Libreria_Recomendada': [
        'python-docx + docx2pdf',
        'pandas',
        'pdfplumber + pandas',
        'Pillow',
        'weasyprint',
        'pandas + openpyxl',
        'matplotlib + pandas',
        'BeautifulSoup4 + requests',
        'python-docx + xlsxwriter',
        'docxtpl + Jinja2',
        'PyPDF2 + PDFMiner',
        'Pillow + os',
        'Pandoc CLI',
        'requests + pandas',
        'pandas + nltk'
    ],
    'Alternativa_Open_Source': [
        'LibreOffice SDK',
        'openpyxl',
        'tabula-py',
        'ImageMagick CLI',
        'Pandoc',
        'pyexcel',
        'plotly + dash',
        'scrapy',
        'LibreOffice UNO API',
        'python-docx + jinja2',
        'pdfplumber',
        'OpenCV-Python',
        'LibreOffice CLI',
        'httpx + json',
        'spaCy + pandas'
    ],
    'Dificultad_Implementacion': [
        'F√°cil',
        'F√°cil',
        'Medio',
        'F√°cil',
        'Medio',
        'F√°cil',
        'Medio',
        'Medio',
        'Medio',
        'Medio',
        'Dif√≠cil',
        'F√°cil',
        'F√°cil',
        'F√°cil',
        'Dif√≠cil'
    ],
    'Rendimiento': [
        'Alto',
        'Muy Alto',
        'Medio',
        'Alto',
        'Medio',
        'Alto',
        'Alto',
        'Medio',
        'Medio',
        'Alto',
        'Bajo',
        'Alto',
        'Alto',
        'Alto',
        'Medio'
    ],
    'Ventajas_Principales': [
        'Mantiene formato original, r√°pido',
        'Optimizado para big data, memoria eficiente',
        'Preserva estructura tabular compleja',
        'M√∫ltiples formatos, optimizaciones autom√°ticas',
        'CSS completo, layouts complejos',
        'Pivot tables, formatos autom√°ticos',
        'Visualizaciones interactivas, web-ready',
        'Anti-blocking, parseo robusto',
        'Templates reutilizables, branded docs',
        'Variables din√°micas, logic templates',
        'Acceso raw a contenido PDF',
        'Operaciones paralelas, filtros avanzados',
        'M√°xima compatibilidad formatos',
        'Pipelines automatizados, escalables',
        'NLP avanzado, machine learning ready'
    ],
    'Limitaciones': [
        'Solo DOCX moderno, no DOC antiguo',
        'Memoria intensivo con datasets grandes',
        'OCR limitado, tablas complejas fallan',
        'No vectoriales avanzados, no AI upscaling',
        'Rendering lento, JavaScript limitado',
        'Sin formatos complejos Excel avanzados',
        'Curva aprendizaje, dependencias pesadas',
        'Rate limiting, legal issues',
        'Dependencias COM en Windows',
        'L√≥gica template limitada vs full programming',
        'Textos con layout complejo problem√°ticos',
        'No inteligencia contextual autom√°tica',
        'CLI dependency, no programmatic control',
        'Rate limits APIs, authentication complexity',
        'Modelos pre-entrenados, domain adaptation'
    ]
}

df_casos = pd.DataFrame(casos_uso_data)

print("=" * 120)
print("CASOS DE USO ESPEC√çFICOS Y MEJORES PR√ÅCTICAS - LIBRER√çAS OPEN SOURCE")
print("=" * 120)

for idx, row in df_casos.iterrows():
    print(f"\nüéØ {row['Caso_Uso'].upper()}")
    print(f"   üì¶ Librer√≠a principal: {row['Libreria_Recomendada']}")
    print(f"   üîÑ Alternativa: {row['Alternativa_Open_Source']}")
    print(f"   ‚ö° Dificultad: {row['Dificultad_Implementacion']} | Rendimiento: {row['Rendimiento']}")
    print(f"   ‚úÖ Ventajas: {row['Ventajas_Principales']}")
    print(f"   ‚ö†Ô∏è  Limitaciones: {row['Limitaciones']}")

# Estad√≠sticas
print(f"\nüìä AN√ÅLISIS DE CASOS DE USO")
print(f"Total casos analizados: {len(df_casos)}")
print(f"\nDistribuci√≥n por dificultad:")
dificultad_counts = df_casos['Dificultad_Implementacion'].value_counts()
for dif, count in dificultad_counts.items():
    print(f"  {dif}: {count} casos ({count/len(df_casos)*100:.1f}%)")

print(f"\nDistribuci√≥n por rendimiento:")
rendimiento_counts = df_casos['Rendimiento'].value_counts()
for rend, count in rendimiento_counts.items():
    print(f"  {rend}: {count} casos ({count/len(df_casos)*100:.1f}%)")

# Guardar CSV
df_casos.to_csv('casos_uso_librerias_open_source.csv', index=False, encoding='utf-8')
print(f"\nArchivo CSV guardado: casos_uso_librerias_open_source.csv")