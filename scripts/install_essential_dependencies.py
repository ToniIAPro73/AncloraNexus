#!/usr/bin/env python3
"""
Instalador de dependencias esenciales para presupuesto reducido
Solo instala lo m√≠nimo necesario para las 5 conversiones de mayor ROI
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description=""):
    """Ejecuta un comando y maneja errores"""
    print(f"üîß {description}")
    print(f"   Ejecutando: {command}")
    
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"   ‚úÖ √âxito")
            return True
        else:
            print(f"   ‚ùå Error (c√≥digo {result.returncode})")
            if result.stderr.strip():
                print(f"   üìÑ Error: {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"   ‚ùå Excepci√≥n: {str(e)}")
        return False

def install_essential_dependencies():
    """Instala solo las dependencias esenciales (GRATIS)"""
    
    print("üöÄ INSTALADOR DE DEPENDENCIAS ESENCIALES")
    print("=" * 50)
    print("üí∞ Costo total: $0")
    print("‚è±Ô∏è  Tiempo estimado: 2-5 minutos")
    print("üéØ Objetivo: 5 conversiones de m√°ximo ROI")
    print()
    
    # Dependencias esenciales (todas gratuitas)
    essential_deps = [
        # Documentos Office
        ("python-docx", "Crear/editar documentos Word"),
        ("openpyxl", "Leer/escribir archivos Excel"),
        ("pandas", "Procesamiento de datos (CSV, Excel, JSON)"),
        
        # PDFs
        ("PyPDF2", "Manipulaci√≥n b√°sica de PDFs"),
        ("reportlab", "Generaci√≥n de PDFs desde Python"),
        
        # Im√°genes
        ("Pillow", "Procesamiento de im√°genes"),
        
        # Utilidades
        ("pathlib", "Manejo de rutas (incluido en Python 3.4+)"),
    ]
    
    # Dependencias opcionales (mejoran funcionalidad)
    optional_deps = [
        ("docx2pdf", "Conversi√≥n DOCX‚ÜíPDF nativa (Windows/Mac)"),
        ("xlsxwriter", "Creaci√≥n avanzada de archivos Excel"),
    ]
    
    print("üì¶ INSTALANDO DEPENDENCIAS ESENCIALES...")
    print()
    
    success_count = 0
    total_count = len(essential_deps)
    
    for package, description in essential_deps:
        if package == "pathlib":
            # pathlib viene incluido en Python 3.4+
            print(f"‚úÖ {package}: {description} (incluido en Python)")
            success_count += 1
            continue
            
        success = run_command(
            f"pip install {package}",
            f"Instalando {package} - {description}"
        )
        
        if success:
            success_count += 1
        
        print()
    
    print("üì¶ INSTALANDO DEPENDENCIAS OPCIONALES...")
    print("(Estas pueden fallar sin afectar funcionalidad b√°sica)")
    print()
    
    optional_success = 0
    for package, description in optional_deps:
        success = run_command(
            f"pip install {package}",
            f"Instalando {package} - {description}"
        )
        
        if success:
            optional_success += 1
        
        print()
    
    # Resumen de instalaci√≥n
    print("=" * 50)
    print("üìä RESUMEN DE INSTALACI√ìN")
    print("=" * 50)
    
    print(f"‚úÖ Dependencias esenciales: {success_count}/{total_count}")
    print(f"üîß Dependencias opcionales: {optional_success}/{len(optional_deps)}")
    
    if success_count >= total_count - 1:  # Permitir 1 fallo
        print("üéâ ¬°INSTALACI√ìN EXITOSA!")
        print()
        print("üöÄ CONVERSIONES DISPONIBLES:")
        print("   ‚Ä¢ DOCX ‚Üí PDF (Word a PDF)")
        print("   ‚Ä¢ XLSX ‚Üí CSV (Excel a CSV)")
        print("   ‚Ä¢ CSV ‚Üí XLSX (CSV a Excel)")
        print("   ‚Ä¢ JSON ‚Üí XLSX (JSON a Excel)")
        print("   ‚Ä¢ PDF ‚Üí TXT (Extraer texto)")
        print("   ‚Ä¢ JPG ‚Üî PNG (Conversi√≥n im√°genes)")
        print("   ‚Ä¢ GIF ‚Üí PNG")
        print("   ‚Ä¢ BMP ‚Üí JPG")
        print()
        print("üí∞ Costo total: $0")
        print("‚ö° Tiempo de conversi√≥n: < 30 segundos")
        print("üéØ ROI esperado: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")
        
    elif success_count >= total_count // 2:
        print("‚ö†Ô∏è  INSTALACI√ìN PARCIAL")
        print("Algunas conversiones pueden no estar disponibles.")
        print("Revisa los errores anteriores e intenta instalar manualmente:")
        print()
        for package, description in essential_deps:
            if package != "pathlib":
                print(f"   pip install {package}")
        
    else:
        print("‚ùå INSTALACI√ìN FALL√ì")
        print("Muy pocas dependencias se instalaron correctamente.")
        print("Verifica tu conexi√≥n a internet y permisos de instalaci√≥n.")
        return False
    
    return True

def test_installations():
    """Prueba las instalaciones esenciales"""
    
    print("\n" + "=" * 50)
    print("üß™ PROBANDO INSTALACIONES")
    print("=" * 50)
    
    tests = [
        ("python-docx", "import docx; print('‚úÖ python-docx OK')"),
        ("openpyxl", "import openpyxl; print('‚úÖ openpyxl OK')"),
        ("pandas", "import pandas; print('‚úÖ pandas OK')"),
        ("PyPDF2", "import PyPDF2; print('‚úÖ PyPDF2 OK')"),
        ("reportlab", "from reportlab.pdfgen import canvas; print('‚úÖ reportlab OK')"),
        ("Pillow", "from PIL import Image; print('‚úÖ Pillow OK')"),
    ]
    
    working_count = 0
    
    for name, test_command in tests:
        print(f"üß™ Probando {name}...")
        success = run_command(f'python -c "{test_command}"', f"Test de {name}")
        if success:
            working_count += 1
        print()
    
    print(f"üìä RESULTADO: {working_count}/{len(tests)} dependencias funcionando")
    
    if working_count >= len(tests) - 1:
        print("üéâ ¬°TODAS LAS DEPENDENCIAS FUNCIONAN!")
        return True
    elif working_count >= len(tests) // 2:
        print("‚ö†Ô∏è  La mayor√≠a de dependencias funcionan")
        return True
    else:
        print("‚ùå Muchas dependencias fallan")
        return False

def create_test_conversion():
    """Crea un archivo de prueba para verificar conversiones"""
    
    print("\n" + "=" * 50)
    print("üß™ CREANDO PRUEBA DE CONVERSI√ìN")
    print("=" * 50)
    
    try:
        # Crear archivo CSV de prueba
        test_csv = "test_data.csv"
        with open(test_csv, 'w', encoding='utf-8') as f:
            f.write("Nombre,Edad,Ciudad\n")
            f.write("Juan,25,Madrid\n")
            f.write("Mar√≠a,30,Barcelona\n")
            f.write("Carlos,35,Valencia\n")
        
        print(f"‚úÖ Archivo CSV creado: {test_csv}")
        
        # Probar conversi√≥n CSV ‚Üí Excel
        try:
            import pandas as pd
            
            df = pd.read_csv(test_csv)
            test_excel = "test_data.xlsx"
            df.to_excel(test_excel, index=False)
            
            print(f"‚úÖ Conversi√≥n CSV‚ÜíExcel exitosa: {test_excel}")
            print(f"   Datos convertidos: {len(df)} filas")
            
            # Limpiar archivos de prueba
            os.remove(test_csv)
            os.remove(test_excel)
            print("‚úÖ Archivos de prueba eliminados")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error en conversi√≥n de prueba: {str(e)}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error creando prueba: {str(e)}")
        return False

def main():
    """Funci√≥n principal"""
    
    print("üéØ ANCLORA NEXUS - SETUP PRESUPUESTO REDUCIDO")
    print("=" * 60)
    print("Objetivo: Implementar 5 conversiones esenciales con $0 de inversi√≥n")
    print()
    
    # Verificar Python
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 7):
        print("‚ùå Se requiere Python 3.7 o superior")
        print(f"   Versi√≥n actual: {python_version.major}.{python_version.minor}")
        return False
    
    print(f"‚úÖ Python {python_version.major}.{python_version.minor} detectado")
    print()
    
    # Instalar dependencias
    if not install_essential_dependencies():
        print("‚ùå Instalaci√≥n fall√≥")
        return False
    
    # Probar instalaciones
    if not test_installations():
        print("‚ö†Ô∏è  Algunas pruebas fallaron, pero el sistema puede funcionar parcialmente")
    
    # Crear prueba de conversi√≥n
    if create_test_conversion():
        print("\nüéâ ¬°SETUP COMPLETO Y VERIFICADO!")
    else:
        print("\n‚ö†Ô∏è  Setup completo, pero la prueba de conversi√≥n fall√≥")
    
    print("\n" + "=" * 60)
    print("üìã PR√ìXIMOS PASOS:")
    print("1. Integrar essential_converter.py en tu aplicaci√≥n")
    print("2. A√±adir endpoint universal de conversi√≥n")
    print("3. Actualizar frontend para soportar nuevos formatos")
    print("4. Probar con archivos reales")
    print("5. Lanzar beta con usuarios")
    print()
    print("üí∞ Inversi√≥n total: $0")
    print("‚è±Ô∏è  Tiempo de desarrollo restante: 1-2 semanas")
    print("üéØ ROI esperado: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
