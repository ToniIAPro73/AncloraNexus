#!/usr/bin/env python3
"""
Debug espec√≠fico para problemas de conversi√≥n DOCX
Investiga por qu√© fallan las conversiones DOCX v√°lidas
"""
import os
import sys
import tempfile
import requests
from pathlib import Path
from docx import Document

# Configuraci√≥n del servidor
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api"

def debug_docx_conversion():
    """Debug espec√≠fico para conversiones DOCX"""
    print("üîç DEBUG ESPEC√çFICO PARA CONVERSIONES DOCX")
    print("=" * 45)
    
    temp_dir = Path(tempfile.gettempdir()) / "docx_debug"
    temp_dir.mkdir(exist_ok=True)
    
    # 1. Crear DOCX v√°lido simple
    print("\nüìÑ 1. CREANDO DOCX V√ÅLIDO...")
    try:
        doc = Document()
        doc.add_heading('Documento de Prueba', 0)
        doc.add_paragraph('Este es un p√°rrafo simple sin caracteres especiales.')
        doc.add_paragraph('Segundo p√°rrafo con texto normal.')
        
        simple_docx = temp_dir / "simple_test.docx"
        doc.save(str(simple_docx))
        print(f"  ‚úÖ DOCX simple creado: {simple_docx.name}")
        
        # Verificar que es un ZIP v√°lido
        import zipfile
        with zipfile.ZipFile(simple_docx, 'r') as zf:
            files = zf.namelist()
            print(f"  üìã Archivos en DOCX: {len(files)} archivos")
            required = ['[Content_Types].xml', 'word/document.xml']
            has_required = all(req in files for req in required)
            print(f"  üìã Estructura v√°lida: {'‚úÖ' if has_required else '‚ùå'}")
            
    except Exception as e:
        print(f"  ‚ùå Error creando DOCX: {e}")
        return
    
    # 2. Probar conversi√≥n directa con el motor
    print("\nüîß 2. PROBANDO CONVERSI√ìN DIRECTA...")
    try:
        sys.path.insert(0, 'backend/src')
        from models.conversion import conversion_engine
        
        output_file = temp_dir / "output_direct.html"
        success, message = conversion_engine.convert_file(
            str(simple_docx), str(output_file), 'docx', 'html'
        )
        
        print(f"  ‚Ä¢ Conversi√≥n directa: {'‚úÖ' if success else '‚ùå'} - {message}")
        
        if success and output_file.exists():
            content = output_file.read_text(encoding='utf-8')
            print(f"  ‚Ä¢ Archivo generado: {len(content)} caracteres")
            if "Documento de Prueba" in content:
                print("  ‚Ä¢ Contenido correcto: ‚úÖ")
            else:
                print("  ‚Ä¢ Contenido incorrecto: ‚ùå")
        
    except Exception as e:
        print(f"  ‚ùå Error en conversi√≥n directa: {e}")
    
    # 3. Probar conversi√≥n v√≠a API
    print("\nüåê 3. PROBANDO CONVERSI√ìN V√çA API...")
    try:
        with open(simple_docx, 'rb') as f:
            files = {'file': ('simple_test.docx', f, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')}
            data = {'target_format': 'html'}
            
            response = requests.post(f"{API_BASE}/conversion/guest-convert", 
                                   files=files, data=data, timeout=30)
        
        print(f"  ‚Ä¢ Status Code: {response.status_code}")
        print(f"  ‚Ä¢ Response: {response.text[:200]}...")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print("  ‚Ä¢ Conversi√≥n API: ‚úÖ EXITOSA")
                
                # Probar descarga
                download_id = result.get('download_id')
                if download_id:
                    download_response = requests.get(
                        f"{API_BASE}/conversion/guest-download/{download_id}",
                        timeout=10
                    )
                    print(f"  ‚Ä¢ Descarga: {'‚úÖ' if download_response.status_code == 200 else '‚ùå'}")
            else:
                print(f"  ‚Ä¢ Conversi√≥n API: ‚ùå FALL√ì - {result.get('message')}")
        else:
            print(f"  ‚Ä¢ Conversi√≥n API: ‚ùå ERROR HTTP {response.status_code}")
            
    except Exception as e:
        print(f"  ‚ùå Error en conversi√≥n API: {e}")
    
    # 4. Probar con archivo DOCX con caracteres especiales
    print("\nüåç 4. PROBANDO DOCX CON CARACTERES ESPECIALES...")
    try:
        doc_special = Document()
        doc_special.add_heading('Documento con Caracteres Especiales', 0)
        doc_special.add_paragraph('Texto con acentos: √°√©√≠√≥√∫ √±√ë')
        doc_special.add_paragraph('Emojis: üöÄ üìÑ ‚úÖ')
        doc_special.add_paragraph('S√≠mbolos: ¬© ¬Æ ‚Ñ¢ ‚Ç¨ ¬£')
        
        special_docx = temp_dir / "special_chars.docx"
        doc_special.save(str(special_docx))
        
        # Probar conversi√≥n
        with open(special_docx, 'rb') as f:
            files = {'file': ('special_chars.docx', f, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')}
            data = {'target_format': 'html'}
            
            response = requests.post(f"{API_BASE}/conversion/guest-convert", 
                                   files=files, data=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print("  ‚Ä¢ DOCX especiales: ‚úÖ CONVERTIDO")
            else:
                print(f"  ‚Ä¢ DOCX especiales: ‚ùå FALL√ì - {result.get('message')}")
        else:
            print(f"  ‚Ä¢ DOCX especiales: ‚ùå ERROR HTTP {response.status_code}")
            
    except Exception as e:
        print(f"  ‚ùå Error con caracteres especiales: {e}")
    
    # 5. Verificar logs de encoding durante conversiones
    print("\nüìã 5. VERIFICANDO LOGS DE ENCODING...")
    try:
        log_file = Path("backend/logs/encoding/encoding_normalizer.log")
        if log_file.exists():
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            print(f"  ‚Ä¢ Total entradas en log: {len(lines)}")
            
            # Buscar entradas recientes relacionadas con DOCX
            docx_entries = []
            for line in lines[-20:]:  # √öltimas 20 entradas
                if 'docx' in line.lower():
                    try:
                        import json
                        entry = json.loads(line.strip())
                        docx_entries.append(entry)
                    except:
                        continue
            
            print(f"  ‚Ä¢ Entradas DOCX recientes: {len(docx_entries)}")
            
            if docx_entries:
                last_docx = docx_entries[-1]
                print(f"  ‚Ä¢ √öltima normalizaci√≥n DOCX: {last_docx.get('from')} ‚Üí {last_docx.get('to')}")
            
        else:
            print("  ‚ùå Log de encoding no encontrado")
            
    except Exception as e:
        print(f"  ‚ùå Error verificando logs: {e}")
    
    print(f"\nüéØ CONCLUSI√ìN DEBUG DOCX:")
    print(f"   ‚Ä¢ Sistema detecta archivos corruptos: ‚úÖ")
    print(f"   ‚Ä¢ Validaci√≥n ZIP funcionando: ‚úÖ")
    print(f"   ‚Ä¢ Problema espec√≠fico en conversi√≥n DOCX v√°lidos")
    print(f"   ‚Ä¢ Encoding normalizer funcionando correctamente")

if __name__ == "__main__":
    debug_docx_conversion()
