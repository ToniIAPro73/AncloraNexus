#!/usr/bin/env node

/**
 * Generador Simplificado de Archivos de Prueba
 * 
 * Genera archivos de prueba sin dependencias nativas para testing
 * del conversor universal en cualquier entorno.
 */

const fs = require('fs').promises;
const path = require('path');

const TEST_FILES_DIR = path.join(__dirname, 'universal-test-files');

// Contenido de prueba para diferentes tipos
const TEST_CONTENT = {
  simple_text: 'Este es un archivo de texto simple para pruebas de conversi√≥n.',
  
  formatted_text: `# Documento de Prueba

## Introducci√≥n
Este documento contiene **texto formateado** para probar conversiones.

### Lista de elementos:
- Elemento 1 con **negrita**
- Elemento 2 con *cursiva*
- Elemento 3 con \`c√≥digo\`

### Tabla de ejemplo:
| Columna 1 | Columna 2 | Columna 3 |
|-----------|-----------|-----------|
| Dato 1    | Dato 2    | Dato 3    |
| Dato 4    | Dato 5    | Dato 6    |

### Caracteres especiales:
√°√©√≠√≥√∫ √± ¬ø¬° ¬´¬ª ‚Äπ‚Ä∫ ‚Ç¨¬£$¬• ¬©¬Æ‚Ñ¢

### Final del documento
Este es el final del documento de prueba.`,

  multilingual_text: `# Documento Multiidioma

## Espa√±ol
Este texto contiene caracteres especiales: √°√©√≠√≥√∫ √± ¬ø¬°

## English
This text contains special characters: √†√®√¨√≤√π √ß

## Fran√ßais
Ce texte contient des caract√®res sp√©ciaux: √¢√™√Æ√¥√ª √ß ≈ì√¶

## Deutsch
Dieser Text enth√§lt Sonderzeichen: √§√∂√º √ü

## ‰∏≠Êñá
Ëøô‰∏™ÊñáÊ°£ÂåÖÂê´‰∏≠ÊñáÂ≠óÁ¨¶ÊµãËØï

## ÿßŸÑÿπÿ±ÿ®Ÿäÿ©
Ÿáÿ∞ÿß ÿßŸÑŸÜÿµ Ÿäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ£ÿ≠ÿ±ŸÅ ÿπÿ±ÿ®Ÿäÿ©

## –†—É—Å—Å–∫–∏–π
–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã`,

  technical_content: `# Documento T√©cnico

## C√≥digo JavaScript:
\`\`\`javascript
function convertFile(input, output) {
    try {
        const result = processConversion(input, output);
        return { success: true, data: result };
    } catch (error) {
        return { success: false, error: error.message };
    }
}
\`\`\`

## F√≥rmulas matem√°ticas:
- E = mc¬≤
- a¬≤ + b¬≤ = c¬≤
- ‚àë(i=1 to n) i = n(n+1)/2

## Datos estructurados:
{
  "conversion": {
    "input": "document.pdf",
    "output": "document.docx",
    "status": "completed"
  }
}

## URLs y enlaces:
- https://example.com/api/convert
- mailto:test@example.com
- ftp://files.example.com/uploads/`
};

class SimpleFileGenerator {
  constructor() {
    this.outputDir = TEST_FILES_DIR;
    this.generatedFiles = [];
  }

  async initialize() {
    try {
      await fs.mkdir(this.outputDir, { recursive: true });
      console.log(`üìÅ Directorio de pruebas creado: ${this.outputDir}`);
    } catch (error) {
      console.error('Error creando directorio:', error);
    }
  }

  async generateAllFiles() {
    console.log('üöÄ Generando archivos de prueba para conversor universal...\n');
    
    // Generar archivos de texto
    await this.generateTextFiles();
    
    // Generar archivos de imagen simulados
    await this.generateImageFiles();
    
    // Generar archivos de documento simulados
    await this.generateDocumentFiles();
    
    // Generar archivos de audio simulados
    await this.generateAudioFiles();
    
    // Generar archivos de video simulados
    await this.generateVideoFiles();
    
    // Generar archivos problem√°ticos
    await this.generateProblematicFiles();
    
    // Generar manifiesto
    await this.generateManifest();
    
    console.log(`\n‚úÖ Generaci√≥n completa. Total: ${this.generatedFiles.length} archivos`);
    return this.generatedFiles;
  }

  async generateTextFiles() {
    console.log('üìù Generando archivos de texto...');
    
    // TXT simples
    await this.createTextFile('simple.txt', TEST_CONTENT.simple_text);
    await this.createTextFile('formatted.txt', TEST_CONTENT.formatted_text);
    await this.createTextFile('multilingual.txt', TEST_CONTENT.multilingual_text);
    await this.createTextFile('technical.txt', TEST_CONTENT.technical_content);
    
    // Markdown
    await this.createTextFile('document.md', TEST_CONTENT.formatted_text);
    
    // Archivos de diferentes tama√±os
    await this.createTextFile('tiny.txt', 'A');
    await this.createTextFile('small.txt', TEST_CONTENT.simple_text.repeat(10));
    await this.createTextFile('medium.txt', TEST_CONTENT.formatted_text.repeat(50));
    await this.createTextFile('large.txt', TEST_CONTENT.multilingual_text.repeat(200));
    
    // Archivo vac√≠o
    await this.createTextFile('empty.txt', '');
  }

  async generateImageFiles() {
    console.log('üñºÔ∏è  Generando archivos de imagen simulados...');
    
    // Crear headers de imagen v√°lidos con datos m√≠nimos
    await this.createImageFile('test_small.jpg', 'jpeg', 300, 200);
    await this.createImageFile('test_medium.jpg', 'jpeg', 1920, 1080);
    await this.createImageFile('test_large.jpg', 'jpeg', 4000, 3000);
    
    await this.createImageFile('test_small.png', 'png', 300, 200);
    await this.createImageFile('test_medium.png', 'png', 1920, 1080);
    
    await this.createImageFile('test_small.gif', 'gif', 300, 200);
    await this.createImageFile('test_small.webp', 'webp', 300, 200);
    
    // Imagen de 1 pixel
    await this.createImageFile('pixel.png', 'png', 1, 1);
  }

  async generateDocumentFiles() {
    console.log('üìÑ Generando archivos de documento simulados...');
    
    // PDFs simulados
    await this.createPDFFile('simple.pdf', TEST_CONTENT.simple_text);
    await this.createPDFFile('formatted.pdf', TEST_CONTENT.formatted_text);
    await this.createPDFFile('multilingual.pdf', TEST_CONTENT.multilingual_text);
    
    // HTML
    await this.createHTMLFile('document.html', TEST_CONTENT.formatted_text);
    
    // CSV
    await this.createCSVFile('data.csv');
  }

  async generateAudioFiles() {
    console.log('üéµ Generando archivos de audio simulados...');
    
    await this.createAudioFile('test_short.wav', 'wav', 10);
    await this.createAudioFile('test_medium.wav', 'wav', 180);
    
    await this.createAudioFile('test_short.mp3', 'mp3', 10);
    await this.createAudioFile('test_medium.mp3', 'mp3', 180);
    
    await this.createAudioFile('test_hq.flac', 'flac', 60);
  }

  async generateVideoFiles() {
    console.log('üé¨ Generando archivos de video simulados...');
    
    await this.createVideoFile('test_clip.mp4', 'mp4', 10, '720p');
    await this.createVideoFile('test_short.mp4', 'mp4', 60, '1080p');
    
    await this.createVideoFile('test_clip.avi', 'avi', 10, '720p');
  }

  async generateProblematicFiles() {
    console.log('‚ö†Ô∏è  Generando archivos problem√°ticos...');
    
    // Archivo corrupto
    await this.createCorruptedFile('corrupted.jpg', 'image');
    
    // Archivo con extensi√≥n incorrecta
    await this.createMislabeledFile('fake_image.jpg', 'text');
    
    // Archivo con nombre problem√°tico
    await this.createTextFile('archivo con espacios & s√≠mbolos (test).txt', 'Contenido de prueba');
    
    // Archivo binario aleatorio
    await this.createRandomBinaryFile('random.bin', 1024);
  }

  // M√©todos auxiliares para crear archivos espec√≠ficos

  async createTextFile(filename, content) {
    const filePath = path.join(this.outputDir, filename);
    await fs.writeFile(filePath, content, 'utf-8');
    this.generatedFiles.push({ filename, type: 'text', size: Buffer.byteLength(content, 'utf-8') });
    console.log(`  ‚úÖ ${filename}`);
  }

  async createImageFile(filename, format, width, height) {
    const filePath = path.join(this.outputDir, filename);
    let header;
    
    switch (format) {
      case 'jpeg':
        header = Buffer.from([0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46]);
        break;
      case 'png':
        header = Buffer.from([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]);
        break;
      case 'gif':
        header = Buffer.from('GIF89a', 'ascii');
        break;
      case 'webp':
        header = Buffer.from('RIFF', 'ascii');
        break;
      default:
        header = Buffer.alloc(10);
    }
    
    // Simular datos de imagen
    const imageSize = Math.max(1000, width * height / 100); // Tama√±o aproximado
    const imageData = Buffer.alloc(imageSize);
    
    // Llenar con datos simulados
    for (let i = 0; i < imageSize; i++) {
      imageData[i] = Math.floor(Math.random() * 256);
    }
    
    const fullBuffer = Buffer.concat([header, imageData]);
    await fs.writeFile(filePath, fullBuffer);
    
    this.generatedFiles.push({ 
      filename, 
      type: 'image', 
      format, 
      width, 
      height, 
      size: fullBuffer.length 
    });
    console.log(`  ‚úÖ ${filename} (${width}x${height})`);
  }

  async createPDFFile(filename, content) {
    const filePath = path.join(this.outputDir, filename);
    
    // PDF m√≠nimo v√°lido
    const pdfContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length ${content.length + 50}
>>
stream
BT
/F1 12 Tf
50 750 Td
(${content.substring(0, 100).replace(/[()\\]/g, '\\$&')}) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000189 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
${300 + content.length}
%%EOF`;

    await fs.writeFile(filePath, pdfContent);
    this.generatedFiles.push({ 
      filename, 
      type: 'document', 
      format: 'pdf', 
      size: Buffer.byteLength(pdfContent) 
    });
    console.log(`  ‚úÖ ${filename}`);
  }

  async createHTMLFile(filename, content) {
    const filePath = path.join(this.outputDir, filename);
    
    const htmlContent = `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Documento de Prueba</title>
</head>
<body>
    <div class="content">
        ${content.replace(/\n/g, '<br>')}
    </div>
</body>
</html>`;

    await fs.writeFile(filePath, htmlContent, 'utf-8');
    this.generatedFiles.push({ 
      filename, 
      type: 'document', 
      format: 'html', 
      size: Buffer.byteLength(htmlContent, 'utf-8') 
    });
    console.log(`  ‚úÖ ${filename}`);
  }

  async createCSVFile(filename) {
    const filePath = path.join(this.outputDir, filename);
    
    const csvContent = `Nombre,Edad,Ciudad,Email
Juan P√©rez,30,Madrid,juan@example.com
Mar√≠a Garc√≠a,25,Barcelona,maria@example.com
Carlos L√≥pez,35,Valencia,carlos@example.com
Ana Mart√≠n,28,Sevilla,ana@example.com
Luis Rodr√≠guez,32,Bilbao,luis@example.com`;

    await fs.writeFile(filePath, csvContent, 'utf-8');
    this.generatedFiles.push({ 
      filename, 
      type: 'document', 
      format: 'csv', 
      size: Buffer.byteLength(csvContent, 'utf-8') 
    });
    console.log(`  ‚úÖ ${filename}`);
  }

  async createAudioFile(filename, format, duration) {
    const filePath = path.join(this.outputDir, filename);
    let header;
    
    switch (format) {
      case 'wav':
        header = Buffer.from('RIFF', 'ascii');
        const wavHeader = Buffer.alloc(44);
        wavHeader.write('RIFF', 0);
        wavHeader.write('WAVE', 8);
        wavHeader.write('fmt ', 12);
        break;
      case 'mp3':
        header = Buffer.from([0xFF, 0xFB, 0x90, 0x00]);
        break;
      case 'flac':
        header = Buffer.from('fLaC', 'ascii');
        break;
      default:
        header = Buffer.alloc(10);
    }
    
    // Simular datos de audio
    const audioSize = duration * 16000; // Aproximado
    const audioData = Buffer.alloc(audioSize);
    
    for (let i = 0; i < audioSize; i++) {
      audioData[i] = Math.floor(Math.random() * 256);
    }
    
    const fullBuffer = Buffer.concat([header, audioData]);
    await fs.writeFile(filePath, fullBuffer);
    
    this.generatedFiles.push({ 
      filename, 
      type: 'audio', 
      format, 
      duration, 
      size: fullBuffer.length 
    });
    console.log(`  ‚úÖ ${filename} (${duration}s)`);
  }

  async createVideoFile(filename, format, duration, resolution) {
    const filePath = path.join(this.outputDir, filename);
    let header;
    
    switch (format) {
      case 'mp4':
        // MP4 box structure
        header = Buffer.alloc(32);
        header.writeUInt32BE(32, 0); // box size
        header.write('ftyp', 4);
        header.write('isom', 8);
        break;
      case 'avi':
        header = Buffer.from('RIFF', 'ascii');
        const aviHeader = Buffer.alloc(12);
        aviHeader.write('RIFF', 0);
        aviHeader.write('AVI ', 8);
        header = aviHeader;
        break;
      default:
        header = Buffer.alloc(20);
    }
    
    // Simular datos de video
    const videoSize = duration * 100000; // Aproximado
    const videoData = Buffer.alloc(videoSize);
    
    for (let i = 0; i < videoSize; i++) {
      videoData[i] = Math.floor(Math.random() * 256);
    }
    
    const fullBuffer = Buffer.concat([header, videoData]);
    await fs.writeFile(filePath, fullBuffer);
    
    this.generatedFiles.push({ 
      filename, 
      type: 'video', 
      format, 
      duration, 
      resolution, 
      size: fullBuffer.length 
    });
    console.log(`  ‚úÖ ${filename} (${duration}s, ${resolution})`);
  }

  async createCorruptedFile(filename, type) {
    const filePath = path.join(this.outputDir, filename);
    
    // Crear archivo con header v√°lido pero datos corruptos
    let header;
    if (type === 'image') {
      header = Buffer.from([0xFF, 0xD8, 0xFF, 0xE0]); // JPEG header
    } else {
      header = Buffer.from('%PDF-1.4', 'ascii');
    }
    
    // Datos corruptos
    const corruptedData = Buffer.alloc(500);
    for (let i = 0; i < 500; i++) {
      corruptedData[i] = Math.floor(Math.random() * 256);
    }
    
    const fullBuffer = Buffer.concat([header, corruptedData]);
    await fs.writeFile(filePath, fullBuffer);
    
    this.generatedFiles.push({ 
      filename, 
      type: 'problematic', 
      issue: 'corrupted', 
      size: fullBuffer.length 
    });
    console.log(`  ‚úÖ ${filename} (corrupted)`);
  }

  async createMislabeledFile(filename, actualType) {
    const filePath = path.join(this.outputDir, filename);
    
    let content;
    if (actualType === 'text') {
      content = Buffer.from('Este es un archivo de texto con extensi√≥n incorrecta', 'utf-8');
    } else {
      content = Buffer.alloc(100, 0x42); // Datos binarios
    }
    
    await fs.writeFile(filePath, content);
    
    this.generatedFiles.push({ 
      filename, 
      type: 'problematic', 
      issue: 'mislabeled', 
      actualType, 
      size: content.length 
    });
    console.log(`  ‚úÖ ${filename} (mislabeled as ${actualType})`);
  }

  async createRandomBinaryFile(filename, size) {
    const filePath = path.join(this.outputDir, filename);
    
    const data = Buffer.alloc(size);
    for (let i = 0; i < size; i++) {
      data[i] = Math.floor(Math.random() * 256);
    }
    
    await fs.writeFile(filePath, data);
    
    this.generatedFiles.push({ 
      filename, 
      type: 'binary', 
      size 
    });
    console.log(`  ‚úÖ ${filename} (${size} bytes)`);
  }

  async generateManifest() {
    const manifest = {
      generated_at: new Date().toISOString(),
      total_files: this.generatedFiles.length,
      categories: {
        text: this.generatedFiles.filter(f => f.type === 'text').length,
        image: this.generatedFiles.filter(f => f.type === 'image').length,
        document: this.generatedFiles.filter(f => f.type === 'document').length,
        audio: this.generatedFiles.filter(f => f.type === 'audio').length,
        video: this.generatedFiles.filter(f => f.type === 'video').length,
        problematic: this.generatedFiles.filter(f => f.type === 'problematic').length,
        binary: this.generatedFiles.filter(f => f.type === 'binary').length
      },
      files: this.generatedFiles,
      test_scenarios: [
        'Conversiones b√°sicas de texto (TXT ‚Üî PDF ‚Üî HTML)',
        'Conversiones de imagen (JPG ‚Üî PNG ‚Üî WebP)',
        'Conversiones de documento (PDF ‚Üî TXT ‚Üî HTML)',
        'Conversiones de audio (WAV ‚Üî MP3 ‚Üî FLAC)',
        'Conversiones de video (MP4 ‚Üî AVI)',
        'Manejo de archivos corruptos',
        'Manejo de archivos con extensi√≥n incorrecta',
        'Archivos de diferentes tama√±os',
        'Contenido multiidioma',
        'Caracteres especiales'
      ]
    };

    const manifestPath = path.join(this.outputDir, 'test_manifest.json');
    await fs.writeFile(manifestPath, JSON.stringify(manifest, null, 2));
    
    console.log(`\nüìã Manifiesto generado: ${manifestPath}`);
  }

  async cleanup() {
    try {
      const files = await fs.readdir(this.outputDir);
      for (const file of files) {
        await fs.unlink(path.join(this.outputDir, file));
      }
      await fs.rmdir(this.outputDir);
      console.log('üßπ Archivos de prueba limpiados');
    } catch (error) {
      console.warn('Advertencia al limpiar archivos:', error.message);
    }
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  const generator = new SimpleFileGenerator();
  
  generator.initialize()
    .then(() => generator.generateAllFiles())
    .then((files) => {
      console.log('\nüéâ ¬°Generaci√≥n de archivos de prueba completada!');
      console.log(`üìÅ Archivos guardados en: ${TEST_FILES_DIR}`);
      console.log(`üìä Total de archivos: ${files.length}`);
      
      // Mostrar resumen por categor√≠a
      const categories = {};
      files.forEach(file => {
        categories[file.type] = (categories[file.type] || 0) + 1;
      });
      
      console.log('\nüìà Resumen por categor√≠a:');
      Object.entries(categories).forEach(([type, count]) => {
        console.log(`  ${type}: ${count} archivos`);
      });
    })
    .catch(error => {
      console.error('‚ùå Error durante la generaci√≥n:', error);
      process.exit(1);
    });
}

module.exports = { SimpleFileGenerator, TEST_CONTENT };

