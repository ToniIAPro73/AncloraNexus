#!/usr/bin/env python3
"""
Pruebas espec√≠ficas para casos que causan "Bad magic number"
Enfocado en archivos DOCX y otros formatos problem√°ticos
"""
import os
import sys
import tempfile
import requests
import zipfile
from pathlib import Path

# Configuraci√≥n del servidor
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api"

class BadMagicNumberTester:
    """Tester espec√≠fico para errores 'Bad magic number'"""
    
    def __init__(self):
        self.temp_dir = Path(tempfile.gettempdir()) / "bad_magic_tests"
        self.temp_dir.mkdir(exist_ok=True)
        self.results = {'passed': 0, 'failed': 0, 'details': {}}

    def run_bad_magic_tests(self):
        """Ejecuta pruebas espec√≠ficas para 'Bad magic number'"""
        print("üîç PRUEBAS ESPEC√çFICAS PARA 'BAD MAGIC NUMBER'")
        print("=" * 50)
        
        # 1. Crear archivos problem√°ticos
        print("\nüìù 1. CREANDO ARCHIVOS PROBLEM√ÅTICOS...")
        self.create_problematic_files()
        
        # 2. Probar archivos DOCX corruptos
        print("\nüìÑ 2. PROBANDO ARCHIVOS DOCX...")
        self.test_docx_cases()
        
        # 3. Probar archivos con encoding mixto
        print("\nüîÄ 3. PROBANDO ENCODING MIXTO...")
        self.test_mixed_encoding()
        
        # 4. Probar archivos con BOM problem√°tico
        print("\nüìã 4. PROBANDO BOM PROBLEM√ÅTICO...")
        self.test_bom_issues()
        
        # 5. Probar archivos ZIP corruptos
        print("\nüì¶ 5. PROBANDO ZIP CORRUPTOS...")
        self.test_zip_corruption()
        
        # 6. Generar reporte
        print("\nüìä 6. GENERANDO REPORTE...")
        self.generate_report()

    def create_problematic_files(self):
        """Crea archivos que pueden causar 'Bad magic number'"""
        print("Creando archivos problem√°ticos...")
        
        # 1. Archivo que parece DOCX pero no lo es
        fake_docx = self.temp_dir / "fake.docx"
        fake_docx.write_text("Este no es un DOCX real", encoding='utf-8')
        print(f"  ‚úÖ Creado: {fake_docx.name} (DOCX falso)")
        
        # 2. Archivo DOCX con header corrupto
        corrupt_docx = self.temp_dir / "corrupt.docx"
        corrupt_docx.write_bytes(b'PK\x03\x04\x00\x00\x00\x00corrupted_data_here')
        print(f"  ‚úÖ Creado: {corrupt_docx.name} (DOCX corrupto)")
        
        # 3. Archivo con BOM UTF-16 pero contenido UTF-8
        mixed_bom = self.temp_dir / "mixed_bom.txt"
        mixed_bom.write_bytes(b'\xff\xfe' + "Texto UTF-8 con BOM UTF-16".encode('utf-8'))
        print(f"  ‚úÖ Creado: {mixed_bom.name} (BOM mixto)")
        
        # 4. Archivo con null bytes
        null_bytes = self.temp_dir / "null_bytes.txt"
        null_bytes.write_bytes(b'Texto\x00con\x00null\x00bytes')
        print(f"  ‚úÖ Creado: {null_bytes.name} (Null bytes)")

    def test_docx_cases(self):
        """Prueba casos espec√≠ficos de DOCX que causan problemas"""
        print("Probando casos DOCX problem√°ticos...")
        
        # Caso 1: DOCX falso
        print("  ‚Ä¢ DOCX falso ‚Üí HTML: ", end="")
        success = self.test_conversion_api("fake.docx", "docx", "html")
        if not success:
            print("‚úÖ RECHAZADO CORRECTAMENTE")
            self.results['passed'] += 1
            self.results['details']['fake_docx'] = 'correctly_rejected'
        else:
            print("‚ùå ACEPTADO INCORRECTAMENTE")
            self.results['failed'] += 1
            self.results['details']['fake_docx'] = 'incorrectly_accepted'
        
        # Caso 2: DOCX corrupto
        print("  ‚Ä¢ DOCX corrupto ‚Üí HTML: ", end="")
        success = self.test_conversion_api("corrupt.docx", "docx", "html")
        if not success:
            print("‚úÖ RECHAZADO CORRECTAMENTE")
            self.results['passed'] += 1
            self.results['details']['corrupt_docx'] = 'correctly_rejected'
        else:
            print("‚ùå ACEPTADO INCORRECTAMENTE")
            self.results['failed'] += 1
            self.results['details']['corrupt_docx'] = 'incorrectly_accepted'
        
        # Caso 3: Crear DOCX v√°lido para comparaci√≥n
        print("  ‚Ä¢ DOCX v√°lido ‚Üí HTML: ", end="")
        valid_docx = self.create_valid_docx()
        if valid_docx:
            success = self.test_conversion_api(valid_docx.name, "docx", "html")
            if success:
                print("‚úÖ CONVERSI√ìN EXITOSA")
                self.results['passed'] += 1
                self.results['details']['valid_docx'] = 'converted_successfully'
            else:
                print("‚ùå CONVERSI√ìN FALL√ì")
                self.results['failed'] += 1
                self.results['details']['valid_docx'] = 'conversion_failed'
        else:
            print("‚ö†Ô∏è NO SE PUDO CREAR DOCX V√ÅLIDO")
            self.results['details']['valid_docx'] = 'creation_failed'

    def create_valid_docx(self):
        """Crea un archivo DOCX v√°lido para pruebas"""
        try:
            from docx import Document
            
            doc = Document()
            doc.add_heading('Documento de Prueba', 0)
            doc.add_paragraph('Este es un documento DOCX v√°lido con caracteres especiales: √°√©√≠√≥√∫ √±√ë')
            doc.add_paragraph('Emojis: üöÄ üìÑ ‚úÖ')
            
            valid_docx = self.temp_dir / "valid_test.docx"
            doc.save(str(valid_docx))
            
            return valid_docx
        except Exception as e:
            print(f"Error creando DOCX v√°lido: {e}")
            return None

    def test_mixed_encoding(self):
        """Prueba archivos con encoding mixto"""
        print("Probando encoding mixto...")
        
        # Archivo con BOM mixto
        print("  ‚Ä¢ BOM mixto ‚Üí TXT: ", end="")
        success = self.test_conversion_api("mixed_bom.txt", "txt", "html")
        if success:
            print("‚úÖ MANEJADO CORRECTAMENTE")
            self.results['passed'] += 1
            self.results['details']['mixed_bom'] = 'handled_correctly'
        else:
            print("‚ùå ERROR EN MANEJO")
            self.results['failed'] += 1
            self.results['details']['mixed_bom'] = 'handling_error'

    def test_bom_issues(self):
        """Prueba problemas espec√≠ficos de BOM"""
        print("Probando problemas de BOM...")
        
        # Archivo con null bytes
        print("  ‚Ä¢ Null bytes ‚Üí HTML: ", end="")
        success = self.test_conversion_api("null_bytes.txt", "txt", "html")
        if success:
            print("‚úÖ MANEJADO")
            self.results['passed'] += 1
            self.results['details']['null_bytes'] = 'handled'
        else:
            print("‚ùå ERROR")
            self.results['failed'] += 1
            self.results['details']['null_bytes'] = 'error'

    def test_zip_corruption(self):
        """Prueba corrupci√≥n espec√≠fica de archivos ZIP (DOCX, EPUB, ODT)"""
        print("Probando corrupci√≥n ZIP...")
        
        # Crear ZIP corrupto que parece DOCX
        print("  ‚Ä¢ ZIP corrupto como DOCX: ", end="")
        try:
            corrupt_zip_docx = self.temp_dir / "corrupt_zip.docx"
            
            # Crear ZIP con estructura incorrecta
            with zipfile.ZipFile(corrupt_zip_docx, 'w') as zf:
                zf.writestr("wrong_structure.xml", "<?xml version='1.0'?><root>corrupted</root>")
            
            success = self.test_conversion_api("corrupt_zip.docx", "docx", "html")
            if not success:
                print("‚úÖ RECHAZADO CORRECTAMENTE")
                self.results['passed'] += 1
                self.results['details']['corrupt_zip'] = 'correctly_rejected'
            else:
                print("‚ùå ACEPTADO INCORRECTAMENTE")
                self.results['failed'] += 1
                self.results['details']['corrupt_zip'] = 'incorrectly_accepted'
                
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
            self.results['failed'] += 1
            self.results['details']['corrupt_zip'] = 'test_error'

    def test_conversion_api(self, filename, source_ext, target_ext):
        """Prueba conversi√≥n usando la API"""
        try:
            file_path = self.temp_dir / filename
            if not file_path.exists():
                return False
            
            with open(file_path, 'rb') as f:
                files = {'file': (filename, f, 'application/octet-stream')}
                data = {'target_format': target_ext}
                
                response = requests.post(f"{API_BASE}/conversion/guest-convert", 
                                       files=files, data=data, timeout=15)
            
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            else:
                return False
                
        except Exception:
            return False

    def generate_report(self):
        """Genera reporte final de casos 'Bad magic number'"""
        print("\n" + "="*50)
        print("üìä REPORTE FINAL - CASOS 'BAD MAGIC NUMBER'")
        print("="*50)
        
        total = self.results['passed'] + self.results['failed']
        success_rate = (self.results['passed'] / total * 100) if total > 0 else 0
        
        print(f"\nüìà ESTAD√çSTICAS:")
        print(f"   Total pruebas: {total}")
        print(f"   Exitosas: {self.results['passed']}")
        print(f"   Fallidas: {self.results['failed']}")
        print(f"   Tasa de √©xito: {success_rate:.1f}%")
        
        print(f"\nüîç AN√ÅLISIS DETALLADO:")
        for test, status in self.results['details'].items():
            icon = "‚úÖ" if 'correctly' in status or 'successfully' in status or 'handled' in status else "‚ùå"
            print(f"   {icon} {test}: {status}")
        
        print(f"\nüí° CONCLUSIONES SOBRE 'BAD MAGIC NUMBER':")
        
        # Analizar patrones
        docx_issues = [k for k, v in self.results['details'].items() if 'docx' in k]
        encoding_issues = [k for k, v in self.results['details'].items() if 'encoding' in k or 'bom' in k]
        
        if any('correctly_rejected' in str(v) for k, v in self.results['details'].items() if 'docx' in k):
            print("   ‚Ä¢ ‚úÖ Sistema detecta correctamente DOCX corruptos")
            print("   ‚Ä¢ ‚úÖ Validaci√≥n de archivos ZIP funcionando")
        
        if success_rate >= 80:
            print("   ‚Ä¢ ‚úÖ Sistema robusto contra archivos problem√°ticos")
            print("   ‚Ä¢ üéØ Errores 'Bad magic number' probablemente por:")
            print("     - Archivos genuinamente corruptos")
            print("     - Problemas de red durante upload")
            print("     - Archivos con extensi√≥n incorrecta")
        else:
            print("   ‚Ä¢ ‚ùå Sistema vulnerable a archivos problem√°ticos")
            print("   ‚Ä¢ ‚ö†Ô∏è Necesita mejoras en validaci√≥n")
        
        print(f"\nüîß RECOMENDACIONES:")
        print("   ‚Ä¢ Implementar validaci√≥n m√°s estricta de headers de archivo")
        print("   ‚Ä¢ Agregar verificaci√≥n de integridad antes de conversi√≥n")
        print("   ‚Ä¢ Mejorar mensajes de error para usuarios")
        
        # Guardar reporte
        import json
        with open('bad_magic_number_test_report.json', 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ Reporte guardado en: bad_magic_number_test_report.json")

def main():
    """Funci√≥n principal"""
    print("üîç Verificando servidor...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor funcionando")
        else:
            print("‚ùå Servidor con problemas")
            return
    except:
        print("‚ùå No se puede conectar al servidor")
        return
    
    # Ejecutar pruebas
    tester = BadMagicNumberTester()
    tester.run_bad_magic_tests()

if __name__ == "__main__":
    main()
